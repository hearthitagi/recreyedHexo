- const { server, site, option } = theme.artalk
- const { use, lazyload } = theme.comments

script.
  (() => {
    let artalkItem = null
    const option = !{JSON.stringify(option)}
    const isShuoshuo = GLOBAL_CONFIG_SITE.pageType === 'shuoshuo'

    const destroyArtalk = () => {
      if (artalkItem) {
        artalkItem.destroy()
        artalkItem = null
      }
    }

    const artalkChangeMode = theme => artalkItem && artalkItem.setDarkMode(theme === 'dark')

    const initArtalk = (el = document, pageKey = location.pathname, url) => {
      artalkItem = Artalk.init({
        el: el.querySelector('#artalk-wrap'),
        server: url,
        //- server: '!{server}',
        site: '!{site}',
        darkMode: document.documentElement.getAttribute('data-theme') === 'dark',
        ...option,
        pageKey: isShuoshuo ? pageKey : (option && option.pageKey) || pageKey
      })

      if (GLOBAL_CONFIG.lightbox === 'null') return
      artalkItem.on('list-loaded', () => {
        artalkItem.ctx.get('list').getCommentNodes().forEach(comment => {
          const $content = comment.getRender().$content
          btf.loadLightbox($content.querySelectorAll('img:not([atk-emoticon])'))
        })
      })

      if (isShuoshuo) {
        window.shuoshuoComment.destroyArtalk = () => {
          destroyArtalk()
          if (el.children.length) {
            el.innerHTML = ''
            el.classList.add('no-comment')
          }
        }
      }

      btf.addGlobalFn('pjaxSendOnce', destroyArtalk, 'destroyArtalk')
      btf.addGlobalFn('themeChange', artalkChangeMode, 'artalk')
    }

    const getFinalUrl = async (initialUrl) => {
      let currentUrl = initialUrl
      let redirectCount = 0
      
      while (redirectCount++ < 5) {
        try {
          const response = await fetch(currentUrl, {
            method: 'HEAD',
            redirect: 'manual',
            credentials: 'omit'
          })

          if (response.status >= 300 && response.status < 400) {
            currentUrl = response.headers.get('Location')
          } else {
            return currentUrl
          }
        } catch (error) {
          console.error('追踪失败:', error)
          return initialUrl // 降级返回原始地址
        }
      }
      throw new Error('超过最大重定向次数')
    }

    const loadArtalk = async (el, pageKey) => {
      const finalServer = await getFinalUrl('!{server}')
      console.log(finalServer)
      if (typeof Artalk === 'object'){
        initArtalk(el, pageKey, finalServer)
      }
      else {
        await btf.getCSS('!{theme.asset.artalk_css}')
        await btf.getScript('!{theme.asset.artalk_js}')
        initArtalk(el, pageKey, finalServer)
      }
    }

    if (isShuoshuo) {
      '!{use[0]}' === 'Artalk'
        ? window.shuoshuoComment = { loadComment: loadArtalk }
        : window.loadOtherComment = loadArtalk
      return
    }

    if ('!{use[0]}' === 'Artalk' || !!{lazyload}) {
      if (!{lazyload}) btf.loadComment(document.getElementById('artalk-wrap'), loadArtalk)
      else setTimeout(loadArtalk, 100)
    } else {
      window.loadOtherComment = loadArtalk
    }
  })()